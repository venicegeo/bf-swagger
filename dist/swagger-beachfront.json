{
  "swagger": "2.0",
  "info": {
    "description": "Beachfront Core Services API",
    "version": "0.1.0",
    "title": "Beachfront API",
    "contact": {
      "name": "The VeniceGeo Project",
      "url": "http://radiantblue.com",
      "email": "venice@radiantblue.com"
    }
  },
  "host": "localhost:8081",
  "basePath": "/",
  "tags": [
    {
      "name": "data-controller",
      "description": "Data Controller"
    },
    {
      "name": "event-controller",
      "description": "Event Controller"
    },
    {
      "name": "service-controller",
      "description": "Service Controller"
    },
    {
      "name": "deployment-controller",
      "description": "Deployment Controller"
    },
    {
      "name": "job-controller",
      "description": "Job Controller"
    },
    {
      "name": "alert-trigger-controller",
      "description": "Alert Trigger Controller"
    }
  ],
  "paths": {
    "/v0/services": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get Supporting Services",
        "description": "Gets all of the Services",
        "operationId": "getServicesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The list of Services.",
            "schema": {
              "$ref": "#/definitions/ServiceResults"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v0/algorithm": {
      "get": {
        "tags": [
          "Algorithm"
        ],
        "summary": "Get Algorithms",
        "description": "Gets all of the Algorithms",
        "operationId": "getAlgorithmsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The list of Algorithms",
            "schema": {
              "$ref": "#/definitions/AlgorithmResults"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v0/algorithm/{serviceId}": {
      "get": {
        "tags": [
          "Algorithm"
        ],
        "summary": "Get Algorithm by ServiceId",
        "description": "Gets the Algorithm by Service Id",
        "operationId": "getAlgorithmViaServiceIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Algorithm for a specific Service",
            "schema": {
              "$ref": "#/definitions/AlgorithmResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v0/job": {
      "get": {
        "tags": [
          "Job"
        ],
        "summary": "Get Jobs",
        "description": "Gets all of the Jobs",
        "operationId": "getJobsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The list of Jobs",
            "schema": {
              "$ref": "#/definitions/JobResults"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Create Job",
        "description": "Create a Job",
        "operationId": "postJobUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "job",
            "description": "The description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateJob"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The created Job",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v0/job/{jobId}": {
      "get": {
        "tags": [
          "Job"
        ],
        "summary": "Get Job by JobId",
        "description": "Gets the Job by Job Id",
        "operationId": "getJobViaJobIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Job specified by the Job Id",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Job"
        ],
        "summary": "Delete Job by JobId",
        "description": "Deletes the Job by Job Id",
        "operationId": "deleteJobViaJobIdUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Job specified by the Job Id",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v0/job/by_scene/{sceneId}": {
      "get": {
        "tags": [
          "Job"
        ],
        "summary": "Get Jobs by SceneId",
        "description": "Gets the Jobs by Scene Id",
        "operationId": "getJobsViaSceneIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The list of Jobs for a specific Scene",
            "schema": {
              "$ref": "#/definitions/JobResults"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v0/job/by_productline/{productlineId}": {
      "get": {
        "tags": [
          "Job"
        ],
        "summary": "Get Jobs by ProductLineId",
        "description": "Gets the Jobs by ProductLine Id",
        "operationId": "getJobsViaProductlineIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The list of Jobs for a specific ProductLine",
            "schema": {
              "$ref": "#/definitions/JobResults"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v0/productline": {
      "get": {
        "tags": [
          "Product Line"
        ],
        "summary": "Get Product Lines",
        "description": "Gets all of the Product Lines",
        "operationId": "getProductLinesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The list of Product Lines",
            "schema": {
              "$ref": "#/definitions/ProductLineResults"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product Line"
        ],
        "summary": "Create Product Line",
        "description": "Creates a Product Line",
        "operationId": "postProductLineUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "productline",
            "description": "The description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The created Product Line",
            "schema": {
              "$ref": "#/definitions/ProductLine"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v0/scene/event/harvest": {
      "post": {
        "tags": [
          "Scene"
        ],
        "summary": "Process a Harvest Event",
        "description": "Process a Harvest Event",
        "operationId": "processHarvestEventUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Job associated with specified Product Line",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "TextDataType": {
      "type": "object",
      "required": [
        "content"
      ],
      "properties": {
        "content": {
          "type": "string",
          "description": "The text content of the Data"
        },
        "mimeType": {
          "type": "string",
          "description": "The media type of the stored Data.  Refer to http://www.iana.org for standard values"
        }
      }
    },
    "ServiceResults": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "description": "The array of Service results",
          "items": {
            "$ref": "#/definitions/Service"
          }
        }
      }
    },
    "Service": {
      "type": "object",
      "required": [
        "serviceId",
        "description",
        "metadata",
        "name",
        "url"
      ],
      "properties": {
        "serviceId": {
          "type": "string",
          "description": "Provided by the System. The unique Id of the Service"
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the resource"
        },
        "metadata": {
          "description": "Object of common metadata fields used to describe Data or Services within the Piazza system",
          "$ref": "#/definitions/Metadata"
        },
        "name": {
          "type": "string",
          "description": "Human-readable name of the resourece"
        },
        "url": {
          "type": "string",
          "description": "The URL to the user Service to be executed"
        }
      }
    },
    "SecurityClassification": {
      "type": "object",
      "required": [
        "classification"
      ],
      "properties": {
        "classification": {
          "type": "string",
          "description": "The security classification marking for the Data"
        }
      }
    },
    "NumericKeyValue": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "The pair key"
        },
        "value": {
          "type": "number",
          "format": "double",
          "description": "The value for the key"
        }
      }
    },
    "TextKeyValue": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "The pair key"
        },
        "value": {
          "type": "string",
          "description": "The value for the key"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "required": [
        "classType"
      ],
      "properties": {
        "availability": {
          "type": "string",
          "description": "Describes the status of the resource(ONLINE, FAILED (The resoure has failed), DEGRADED (The resource is not performing well), OFFLINE (the resource has been turned off)",
          "enum": [
            "status_type"
          ]
        },
        "classType": {
          "description": "Classification of the resource",
          "$ref": "#/definitions/SecurityClassification"
        },
        "clientCertRequired": {
          "type": "boolean",
          "example": false,
          "description": "Indication on whether a client certificate required to access thie resource.  Could be a user certificate or computer certificate"
        },
        "contacts": {
          "type": "string",
          "description": "Name, e-mail and phone number of point of contact (String concatenated together)"
        },
        "createdBy": {
          "type": "string",
          "description": "Username of the individual submitting the resource"
        },
        "createdByJobId": {
          "type": "string",
          "description": "Provided by the system. If available, the Id of the Job that resulted in the creation of this resource."
        },
        "createdOn": {
          "type": "string",
          "description": "The date and time of data submission to Piazza"
        },
        "credentialsRequired": {
          "type": "boolean",
          "example": false,
          "description": "Indication on whether credentials are required to access this resource"
        },
        "format": {
          "type": "string",
          "description": "In case of ComplexData, Format defines the allowed input representation"
        },
        "metadata": {
          "type": "object",
          "description": "A generic Map of String:String (key:value) pairs with additional metadata",
          "additionalProperties": {
            "type": "string"
          }
        },
        "networkAvailable": {
          "type": "string",
          "description": "A list of networks names where this resource is available"
        },
        "numericKeyValueList": {
          "type": "array",
          "description": "Allows for the optional specification of user-defined key-value pairs of numeric values",
          "items": {
            "$ref": "#/definitions/NumericKeyValue"
          }
        },
        "preAuthRequired": {
          "type": "boolean",
          "example": false,
          "description": "Indication on whether preauthorization is required before using the resource?  (e.g. do users need to sign a user agreement, etc.)"
        },
        "qos": {
          "type": "string",
          "description": "Quality level of the resource (Production, Development)"
        },
        "reason": {
          "type": "string",
          "description": "Human readable reason on the status of the resource"
        },
        "statusType": {
          "type": "string",
          "description": "Status of the resource",
          "enum": [
            "ONLINE",
            "OFFLINE",
            "DEGRADED",
            "FAILED"
          ]
        },
        "tags": {
          "type": "string",
          "description": "Keywords describing the resource"
        },
        "textKeyValueList": {
          "type": "array",
          "description": "Allows for the optional specification ofu ser-defined key-value pairs for string values",
          "items": {
            "$ref": "#/definitions/TextKeyValue"
          }
        },
        "version": {
          "type": "string",
          "description": "The current version of the resource"
        }
      }
    },
    "Algorithm": {
      "type": "object",
      "required": [
        "serviceId",
        "url",
        "name",
        "version"
      ],
      "properties": {
        "bands": {
          "type": "array",
          "description": "band description",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the resource"
        },
        "interface": {
          "type": "string",
          "description": "interface description"
        },
        "max_cloud_cover": {
          "type": "number",
          "format": "integer",
          "description": "max_cloud_cover description"
        },
        "name": {
          "type": "string",
          "description": "Human-readable description of the algorithm"
        },
        "service_id": {
          "type": "string",
          "description": "Provided by the System. The unique Id of the Service"
        },
        "url": {
          "type": "string",
          "description": "The URL to the user Service to be executed"
        },
        "version": {
          "type": "string",
          "description": "The current version of the resource"
        }
      }
    },
    "AlgorithmResults": {
      "type": "object",
      "required": [
        "algorithms"
      ],
      "properties": {
        "algorithms": {
          "type": "array",
          "description": "The array of Algorithm results",
          "items": {
            "$ref": "#/definitions/Algorithm"
          }
        }
      }
    },
    "AlgorithmResult": {
      "type": "object",
      "required": [
        "algorithm"
      ],
      "properties": {
        "algorithm": {
          "$ref": "#/definitions/Algorithm",
          "description": "The Algorithm result"
        }
      }
    },
    "Scene": {},
    "ProductLineResults": {
      "type": "object",
      "required": [
        "product_lines"
      ],
      "properties": {
        "product_lines": {
          "type": "array",
          "description": "The array of Product Line results",
          "items": {
            "$ref": "#/definitions/ProductLineType"
          }
        }
      }
    },
    "ProductLineProperties": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "algorithm_name": {
          "type": "string",
          "description": "Human-readable name of the Algorithm"
        },
        "category": {
          "type": "string",
          "description": "The category"
        },
        "created_by": {
          "type": "string",
          "description": "The username of the user that created the Product Line"
        },
        "created_on": {
          "type": "string",
          "description": "The date and time this Product Line was created"
        },
        "max_cloud_cover": {
          "type": "number",
          "format": "integer",
          "description": "Integer representing the maximum cloud cover"
        },
        "name": {
          "type": "string",
          "description": "Human-readable name of the Product Line"
        },
        "owned_by": {
          "type": "string",
          "description": "The owner of the Product Line"
        },
        "spatial_filter_id": {
          "type": "string",
          "description": "The unique Id of the Spatial Filter"
        },
        "start_on": {
          "type": "string",
          "description": "The date and time of when this Product Line started"
        },
        "stop_on": {
          "type": "string",
          "description": "The date and time of when this Product Line stopped"
        },
        "type": {
          "type": "string",
          "description": "Product Line type"
        }
      }
    },
    "Job": {
      "type": "object",
      "required": [
        "id",
        "properties",
        "type",
        "geometry"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The owner of the Product Line"
        },
        "properties": {
          "type": "object",
          "description": "The unique Id of the Spatial Filter",
          "$ref": "#/definitions/JobProperties"
        },
        "type": {
          "type": "string",
          "description": "The date and time of when this Product Line started"
        },
        "geometry": {
          "type": "object",
          "description": "The date and time of when this Product Line stopped",
          "$ref": "#/definitions/Geometry"
        }
      }
    },
    "ProductLine": {
      "type": "object",
      "required": [
        "id",
        "properties",
        "type",
        "geometry"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The owner of the Product Line"
        },
        "properties": {
          "type": "object",
          "description": "The unique Id of the Spatial Filter",
          "$ref": "#/definitions/ProductLineProperties"
        },
        "type": {
          "type": "string",
          "description": "The date and time of when this Product Line started"
        },
        "geometry": {
          "type": "object",
          "description": "The date and time of when this Product Line stopped",
          "$ref": "#/definitions/Geometry"
        }
      }
    },
    "Geometry": {
      "type": "object",
      "required": [
        "coordinates",
        "type"
      ],
      "properties": {
        "coordinates": {
          "type": "array",
          "description": "The unique Id of the Spatial Filter",
          "items": {
            "type": "array",
            "description": "test",
            "items": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "type": {
          "type": "string",
          "description": "The date and time of when this Product Line started"
        }
      }
    },
    "JobProperties": {
      "type": "object",
      "required": [
        "scene_id",
        "name"
      ],
      "properties": {
        "algorithm_name": {
          "type": "string",
          "description": "Provided by the System. The unique Id of the Product Line"
        },
        "algorithm_version": {
          "type": "string",
          "description": "Human-readable name of the Algorithm"
        },
        "geometry": {
          "type": "string",
          "description": "The bounding box geometry tuple"
        },
        "created_by": {
          "type": "string",
          "description": "The username of the user that created the Product Line"
        },
        "created_on": {
          "type": "string",
          "description": "The date and time this Product Line was created"
        },
        "scene_capture_date": {
          "type": "number",
          "format": "integer",
          "description": "Integer representing the maximum cloud cover"
        },
        "scene_sensor_name": {
          "type": "string",
          "description": "sensor name"
        },
        "name": {
          "type": "string",
          "description": "Human-readable name of the Product Line"
        },
        "scene_id": {
          "type": "string",
          "description": "The owner of the Product Line"
        },
        "status": {
          "type": "string",
          "description": "The unique Id of the Spatial Filter"
        },
        "tide": {
          "type": "string",
          "description": "The date and time of when this Product Line started"
        },
        "tide_min_24h": {
          "type": "string",
          "description": "The date and time of when this Product Line stopped"
        },
        "tide_max_24h": {
          "type": "string",
          "description": "max tide"
        }
      }
    },
    "JobResults": {
      "type": "object",
      "required": [
        "jobs"
      ],
      "properties": {
        "jobs": {
          "type": "object",
          "description": "The array of Job results",
          "$ref": "#/definitions/JobType"
        }
      }
    },
    "JobType": {
      "type": "object",
      "required": [
        "features",
        "type"
      ],
      "properties": {
        "features": {
          "type": "array",
          "description": "The array of Job results",
          "items": {
            "$ref": "#/definitions/Job"
          }
        },
        "type": {
          "type": "string",
          "description": "Job Type"
        }
      }
    },
    "ProductLineType": {
      "type": "object",
      "required": [
        "features",
        "type"
      ],
      "properties": {
        "features": {
          "type": "array",
          "description": "The array of Product Line results",
          "items": {
            "$ref": "#/definitions/ProductLine"
          }
        },
        "type": {
          "type": "string",
          "description": "Product Line Type"
        }
      }
    },
    "CreateJob": {
      "type": "object",
      "required": [
        "apiKey",
        "userId",
        "sceneId",
        "serviceId",
        "jobName"
      ],
      "properties": {
        "apiKey": {
          "type": "string",
          "description": ""
        },
        "userId": {
          "type": "string",
          "description": ""
        },
        "sceneId": {
          "type": "string",
          "description": ""
        },
        "serviceId": {
          "type": "string",
          "description": ""
        },
        "jobName": {
          "type": "string",
          "description": ""
        }
      }
    }
  }
}
